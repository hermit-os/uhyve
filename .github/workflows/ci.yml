name: CI

on:
  push:
    branches:
      - master
      - staging
      - trying
  pull_request:
    branches:
      - master

env:
  CARGO_TERM_COLOR: always

jobs:
  check:
    name: Check
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        arch: [x86_64, aarch64]
        os: [ubuntu-latest, macos-latest]
        exclude:
          - arch: aarch64
            os: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/setup-target
        with:
          arch: ${{ matrix.arch }}
          os: ${{ matrix.os }}
      - run: cargo check --all-targets

  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    steps:
      - uses: actions/checkout@v3
      - name: Test
        run: |
          cargo test --lib
          cargo test --bins --examples
          cargo test --doc

  integration-tests:
    name: Integration Tests
    runs-on: [self-hosted]
    steps:
      - name: Install gdb
        run: |
          sudo apt-get update
          sudo apt-get install gdb
      - uses: actions/checkout@v3
      - name: Integration Tests
        run: cargo test --test '*'

  run_images:
    name: Run images
    runs-on: [self-hosted]
    steps:
      - uses: actions/checkout@v3
        with:
          lfs: true
      - run: git lfs checkout
      - name: Run images
        run: |
          cargo run -- -v data/x86_64/hello_world
          cargo run -- -v data/x86_64/hello_c

  rusty_demo:
    name: rusty_demo
    runs-on: [self-hosted]
    steps:
      - name: Install NASM
        run: |
          sudo apt-get update
          sudo apt-get install nasm
      - uses: actions/checkout@v3
      - uses: actions/checkout@v3
        with:
          repository: hermitcore/rusty-demo
          path: rusty-demo
      - name: Build rusty_demo
        run: cargo build -Zbuild-std=core,alloc,std,panic_abort -Zbuild-std-features=compiler-builtins-mem --target x86_64-unknown-hermit
        working-directory: rusty-demo
      - name: Run rusty_demo
        run: RUST_LOG=debug cargo run -- --verbose rusty-demo/target/x86_64-unknown-hermit/debug/hello_world
      - name: Run rusty_demo
        run: RUST_LOG=debug cargo run --release -- --verbose rusty-demo/target/x86_64-unknown-hermit/debug/hello_world

  fmt:
    name: Format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      # TODO: Remove this, once https://github.com/rust-lang/rustfmt/issues/4991 is resolved
      - uses: dtolnay/rust-toolchain@nightly
        with:
          components: rustfmt
      - name: Format
        run: cargo fmt --all -- --check
      - name: Format Test Kernels
        run: cargo fmt --all -- --check
        working-directory: tests/test-kernels

  clippy:
    name: Clippy
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        arch: [x86_64, aarch64]
        os: [ubuntu-latest, macos-latest]
        exclude:
          - arch: aarch64
            os: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/setup-target
        with:
          arch: ${{ matrix.arch }}
          os: ${{ matrix.os }}
      - name: Clippy
        run: cargo clippy --all-targets -- -D warnings
  
  clippy-test-kernel:
    name: Clippy test-kernels
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Clippy Test Kernels
        run: cargo clippy --all-targets -- -D warnings
        working-directory: tests/test-kernels
      
  coverage:
    name: Coverage
    runs-on: [self-hosted]
    steps:
      - name: Install gdb
        run: |
          sudo apt-get update
          sudo apt-get install gdb
      - uses: actions/checkout@v3
      - name: Install cargo-llvm-cov
        run: curl -LsSf https://github.com/taiki-e/cargo-llvm-cov/releases/latest/download/cargo-llvm-cov-x86_64-unknown-linux-gnu.tar.gz | tar xzf - -C ~/.cargo/bin
      - name: Generate code coverage
        run: cargo llvm-cov --lcov --output-path lcov.info
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: lcov.info
          fail_ci_if_error: true
