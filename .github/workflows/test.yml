name: Build and test

on:
  pull_request:
  push:
    branches:
      - master
      - staging
      - trying
  schedule:
    - cron: '0 0 * * 6'

jobs:
  test:
    name: Cargo tests
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest,macOS-latest]
        rust: [nightly]
        include:
          - os: macOS-latest
            rust: 'nightly'
            components: 'rustfmt, clippy, rust-src'
            targets: 'x86_64-apple-darwin'
          - os: ubuntu-latest
            rust: 'nightly'
            components: 'rustfmt, clippy'
            targets: 'x86_64-unknown-linux-musl'


    steps:
    - uses: hecrj/setup-rust-action@v1
      with:
         rust-version: ${{ matrix.rust }}
         components: ${{ matrix.components || '' }}
         targets: ${{ matrix.targets || '' }}
    - uses: actions/checkout@v2.3.4
      with:
         submodules: true
         fetch-depth: '0'
    - name: Check Cargo availability
      run: cargo --version
    - name: Test
      run: |
         cargo test --lib -- --nocapture
         cargo test --doc -- --nocapture



  build:
    name: Build
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest,macOS-latest]
        rust: [nightly]
        include:
          - os: macOS-latest
            rust: 'nightly'
            components: 'rustfmt, clippy, rust-src'
            targets: 'x86_64-apple-darwin'
          - os: ubuntu-latest
            rust: 'nightly'
            components: 'rustfmt, clippy'
            targets: 'x86_64-unknown-linux-musl'


    steps:
    - uses: hecrj/setup-rust-action@v1
      with:
         rust-version: ${{ matrix.rust }}
         components: ${{ matrix.components || '' }}
         targets: ${{ matrix.targets || '' }}
    - uses: actions/checkout@v2.3.4
      with:
         submodules: true
    - name: Check Cargo availability
      run: cargo --version
    - name: Build
      run:
         cargo build
    - name: Build with instrument feature
      run:
         cargo clean && RUSTFLAGS="-Z instrument-mcount" cargo build
    - name: Compile, but don't run benchmarks
      run:
         cargo bench --no-run

  kernel-tests:
    name: Rusty-Hermit Unit & KVM integration Tests
    runs-on: [self-hosted]

    steps:
    - uses: hecrj/setup-rust-action@v1
      with:
         rust-version: nightly
         components: 'rustfmt, clippy'
         targets: 'x86_64-unknown-linux-gnu'
    - uses: actions/checkout@v2.3.4
      with:
         submodules: true
    - name: Check Cargo availability
      run: cargo --version
    - name: Integration Tests
      run: cargo test --test '*'
    - name: Generate integration test coverage
      run: |
        ./generate_test_coverage.sh --print-coverage
    - name: Generate unit test coverage
      run: |
        #./generate_test_coverage.sh --print-coverage
        bash <(curl -s https://codecov.io/bash) -f
    - uses: codecov/codecov-action@v1.5.0
      with:
        files: ./coveralls.json

  kvm:
    name: Run Demos
    runs-on: [self-hosted]
    steps:
    - uses: hecrj/setup-rust-action@v1
      with:
         rust-version: nightly
         components: 'rustfmt, clippy'
         targets: 'x86_64-unknown-linux-gnu'
    - uses: actions/checkout@v2.3.4
      with:
         submodules: true
    - name: Check Cargo availability
      run: cargo --version
    - name: Build (debug)
      run:
         cargo build
    - name: Build (release)
      run:
         cargo build --release
    - name: Prepare test environment
      shell: bash
      run: |
         lscpu
         kvm-ok
         cd $GITHUB_WORKSPACE
         cd ..
         rm -rf rusty-hermit
         git clone --recurse-submodules https://github.com/hermitcore/rusty-hermit.git
    - name: KVM tests (debug)
      shell: bash
      run: |
         cd $GITHUB_WORKSPACE
         cd ../rusty-hermit
         cargo build -p rusty_demo
         RUST_LOG=debug $GITHUB_WORKSPACE/target/debug/uhyve -v -c 1 target/x86_64-unknown-hermit/debug/rusty_demo
    - name: KVM tests (release)
      shell: bash
      run: |
         cd $GITHUB_WORKSPACE
         cd ../rusty-hermit
         cargo build -p rusty_demo --release
         RUST_LOG=debug $GITHUB_WORKSPACE/target/release/uhyve -v -c 1 target/x86_64-unknown-hermit/release/rusty_demo

  kernel-tests:
    name: Rusty-Hermit Kernel Tests
    runs-on: [self-hosted]

    steps:
    - uses: hecrj/setup-rust-action@v1
      with:
         rust-version: nightly
         components: 'rustfmt, clippy'
         targets: 'x86_64-unknown-linux-gnu'
    - uses: actions/checkout@v2.3.4
      with:
         submodules: true
    - name: Check Cargo availability
      run: cargo --version
    - name: Integration Tests
      run: cargo test --test '*'


  check:
    name: Format check
    runs-on: ubuntu-latest

    strategy:
      matrix:
        os: [ubuntu-latest]
        rust: [nightly]
        include:
          - os: ubuntu-latest
            rust: 'nightly'
            components: 'rustfmt'
            targets: 'x86_64-unknown-linux-gnu'
    steps:
      - uses: hecrj/setup-rust-action@v1
        with:
          rust-version: ${{ matrix.rust }}
          components: ${{ matrix.components || '' }}
          targets: ${{ matrix.targets || '' }}
      - name: Checkout
        uses: actions/checkout@v2.3.4
      - name: Check Formatting
        run: cargo fmt -- --check
      - name: Check Integration Test Formatting
        working-directory: ./tests/test-kernels
        run: cargo fmt -- --check
